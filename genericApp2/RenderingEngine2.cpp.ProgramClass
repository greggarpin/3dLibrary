//
//  RenderingEngine1.cpp
//  genericApp2
//
//  Created by Arpin, Gregg on 7/16/15.
//  Copyright (c) 2015 Arpin, Gregg. All rights reserved.
//

#include <OpenGLES/ES2/gl.h>
#include <OpenGLES/ES2/glext.h>
#include <cmath>
#include <iostream>
#include "IRenderingEngine.h"
#include "Polygon.h"
#include "Cube.h"
#include "RenderContext.h"
#include "Matrix.h"
#include "Util.h"

#define STRINGIFY(A) #A
#include "shaders/Simple.vert"
#include "shaders/Selection.vert"
#include "shaders/Simple.frag"

class ShaderProgram {
public:
    ShaderProgram()
    {
        vertShaderHandle = fragShaderHandle = progHandle = 0;
    };
    void Build(const char *vertexShaderSource, const char *fragmentShaderSource)
    {
        GLuint vertexShader = BuildShader(vertexShaderSource, GL_VERTEX_SHADER);
        GLuint fragmentShader = BuildShader(fragmentShaderSource, GL_FRAGMENT_SHADER);

        progHandle = glCreateProgram();
        RenderContext::getMutableContext()->setProgramHandle(progHandle);

        glAttachShader(progHandle, vertexShader);
        glAttachShader(progHandle, fragmentShader);
        glLinkProgram(progHandle);

        GLint linkSuccess;
        glGetProgramiv(progHandle, GL_LINK_STATUS, &linkSuccess);

        if (linkSuccess == GL_FALSE) {
            GLchar messages[256];
            glGetProgramInfoLog(progHandle, sizeof(messages), 0, &messages[0]);
            std::cout << messages;
            exit(1);
        }
    }
    static ShaderProgram *GetActiveProgram()
    {
        return activeProgram;
    }
    void Use()
    {
        glUseProgram(progHandle);
        ShaderProgram::activeProgram = this;
    }
    inline GLuint GetAttribLocation(const char *handleName)
    {
        return glGetAttribLocation(progHandle, handleName);
    }
    inline GLuint GetUniformLocation(const char *handleName)
    {
        return glGetUniformLocation(progHandle, handleName);
    }
private:
    GLuint vertShaderHandle, fragShaderHandle, progHandle;
    static ShaderProgram *activeProgram;

    GLuint BuildShader(const char *source, GLenum shaderType) const
    {
        GLuint shaderHandle = glCreateShader(shaderType);
        glShaderSource(shaderHandle, 1, &source, 0);
        glCompileShader(shaderHandle);

        GLint compileSuccess;
        glGetShaderiv(shaderHandle, GL_COMPILE_STATUS, &compileSuccess);
        if (compileSuccess == GL_FALSE) {
            GLchar messages[256];
            glGetShaderInfoLog(shaderHandle, sizeof(messages), 0, &messages[0]);
            std::cout << messages;
            exit(1);
        }
        
        return shaderHandle;
    }

};

ShaderProgram *ShaderProgram::activeProgram = NULL;

class RenderingEngine2 : public IRenderingEngine {
public:
    RenderingEngine2();
    void Initialize(int width, int height);
    void Render() const;
    void UpdateAnimation(float timeStep) {}
    void OnRotate(DeviceOrientation orientation) {}
    void Rotate(float deltaXRad, float deltaYRad, float deltaZRad);

    void onTouchStart(int x, int y);
    void onTouchMoved(int x, int y);
    void onTouchEnd(int x, int y);

private:
    GLuint BuildShader(const char *source, GLenum shaderType) const;
    GLuint BuildProgram(const char *vertShader, const char *fragShader) const;
    void ApplyOrtho(float maxX, float maxY) const;
    void ApplyPerspective(float near, float far, float left, float right, float top, float bottom);
    void ApplyRotation() const;
    GLuint m_framebuffer;
    GLuint m_renderbuffer;
    ShaderProgram normalProgram, selectionProgram;
    float xRot, yRot, zRot;
    int touchX, touchY;
    bool touchStarted;

    Polygon testPolygon;
    Cube testCube;
};

void dotests()
{
    MatrixTestSled mts;
    mts.test();
}
IRenderingEngine* CreateRenderer2()
{
    if (0)
        dotests();

    return new RenderingEngine2();
}

RenderingEngine2::RenderingEngine2()
{
    glGenRenderbuffers(1, &m_renderbuffer);
    glBindRenderbuffer(GL_RENDERBUFFER, m_renderbuffer);

    xRot = yRot = zRot = 0;
    touchStarted = false;
}

void RenderingEngine2::Initialize(int width, int height)
{
    glGenFramebuffers(1, &m_framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, m_framebuffer);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, m_renderbuffer);

    RenderContext::getMutableContext()->setWidth(width);
    RenderContext::getMutableContext()->setHeight(height);

    glViewport(0, 0, width, height);

    normalProgram.Build(SimpleVertexShader, SimpleFragmentShader);
    selectionProgram.Build(SelectionVertexShader, SimpleFragmentShader);

    selectionProgram.Use();
    ApplyRotation();
    ApplyPerspective(-1, 10, -2, 2, -3, 3);

    normalProgram.Use();

    ApplyRotation();
//    ApplyOrtho(2, 3);
    ApplyPerspective(-1, 10, -2, 2, -3, 3);
}

void RenderingEngine2::Render() const
{
    RenderMode renderMode = wireframe;

    GLuint positionSlot;
    GLuint colorSlot;
    if (renderMode == selection)
    {
    }
    positionSlot = ShaderProgram::GetActiveProgram()->GetAttribLocation("Position");
    colorSlot = ShaderProgram::GetActiveProgram()->GetAttribLocation("SourceColor");

    glClearColor(.6,0.6,0.6,1);
    glClear(GL_COLOR_BUFFER_BIT);

    ApplyRotation();

    RenderContext::getMutableContext()->setPositionHandle(positionSlot);
    RenderContext::getMutableContext()->setColorHandle(colorSlot);

    testCube.render(renderMode);

    Matrix o(RenderContext::getContext()->modelviewMatrix);
    Matrix m;
    float taxis[3] = {0, 1, 0};
    m.makeRotationMatrix(taxis, 2*PI/3);
    RenderContext::getMutableContext()->modelviewMatrix.multiply(m);
    RenderContext::getMutableContext()->applyModelviewMatrix();
        testCube.render(renderMode);
    RenderContext::getMutableContext()->modelviewMatrix.set(o);
    m.makeRotationMatrix(taxis, -2*PI/3);
    RenderContext::getMutableContext()->modelviewMatrix.multiply(m);
    RenderContext::getMutableContext()->applyModelviewMatrix();
        testCube.render(renderMode);
    RenderContext::getMutableContext()->modelviewMatrix.set(o);

    RenderContext::getMutableContext()->setPositionHandle(VERTEX_HANDLE_NONE);
    RenderContext::getMutableContext()->setColorHandle(VERTEX_HANDLE_NONE);
}

void RenderingEngine2::ApplyOrtho(float maxX, float maxY) const
{
    float a = 1.0/maxX;
    float b = 1.0/maxY;

    Matrix orthoMatrix;
    orthoMatrix.set(a, 0, 0, 0,
                    0, b, 0, 0,
                    0, 0, -1, 0,
                    0, 0, 0, 1);

    GLint projectionUniform = ShaderProgram::GetActiveProgram()->GetUniformLocation("Projection");

    glUniformMatrix4fv(projectionUniform, 1, 0, orthoMatrix.getPointer());
}

void RenderingEngine2::ApplyPerspective(float near, float far, float left, float right, float top, float bottom)
{
    float a = 2*near/(right - left);
    float b = 2*near/(top - bottom);
    float c = (right+left)/(right - left);
    float d = (top+bottom)/(top - bottom);
    float e = (far+ near)/(far - near);
    float f = -2*far*near/(far - near);

    Matrix projMatrix;
    projMatrix.set(
        a,  0,  0,  0,
        0,  b,  0,  0,
        c,  d,  e,  -1,
        0,  0,  f,  1);

    GLint projectionUniform = ShaderProgram::GetActiveProgram()->GetUniformLocation("Projection");
    glUniformMatrix4fv(projectionUniform, 1, 0, projMatrix.getPointer());
}

void RenderingEngine2::Rotate(float deltaXRad, float deltaYRad, float deltaZRad)
{
    xRot += deltaXRad;
    CLAMP_RAD(xRot);
    
    yRot += deltaYRad;
    CLAMP_RAD(yRot);

    zRot += deltaZRad;
    CLAMP_RAD(zRot);
}

void RenderingEngine2::ApplyRotation() const
{
    float xAxis []  = {1, 0, 0};
    float yAxis []  = {0, 1, 0};
    float zAxis []  = {0, 0, 1};

    Matrix m;

    RenderContext::getMutableContext()->modelviewMatrix.makeIdentityMatrix();

    m.makeRotationMatrix(xAxis, xRot);
    RenderContext::getMutableContext()->modelviewMatrix.multiply(m);

    m.makeRotationMatrix(yAxis, yRot);
    RenderContext::getMutableContext()->modelviewMatrix.multiply(m);

    m.makeRotationMatrix(zAxis, zRot);
    RenderContext::getMutableContext()->modelviewMatrix.multiply(m);

    RenderContext::getMutableContext()->applyModelviewMatrix();
}

#define NORMALIZED_TOUCH_CHANGE_X(deltaX) (PI * ((float)deltaX) / (float)RenderContext::getContext()->getWidth())
#define NORMALIZED_TOUCH_CHANGE_Y(deltaY) (PI * ((float)deltaY) / (float)RenderContext::getContext()->getHeight())

void RenderingEngine2::onTouchStart(int x, int y)
{
    touchStarted = true;

    touchX = x;
    touchY = y;
}

void RenderingEngine2::onTouchMoved(int x, int y)
{
    if (!touchStarted)
        return;

    Rotate(NORMALIZED_TOUCH_CHANGE_Y(y - touchY), NORMALIZED_TOUCH_CHANGE_X(touchX - x), 0);

    touchX = x;
    touchY = y;
}

void RenderingEngine2::onTouchEnd(int x, int y)
{
    if (!touchStarted)
        return;

    touchX = x;
    touchY = y;

    touchStarted = false;
}
